From d86def43ebae3793542ae884c8821462b847f176 Mon Sep 17 00:00:00 2001
From: atefganm <atef_anim_1974@yahoo.com>
Date: Fri, 16 Apr 2021 20:38:30 +0200
Subject: [PATCH] make-front-led-configurable

---
 data/menu.xml                        |  1 +
 data/setup.xml                       | 28 +++++++++++---
 lib/python/Components/Lcd.py         | 36 ++++++++++++++++++
 lib/python/Components/UsageConfig.py |  5 +++
 lib/python/Screens/SessionGlobals.py | 57 +++++++++++++++++++++++++++-
 5 files changed, 119 insertions(+), 8 deletions(-)

diff --git a/data/menu.xml b/data/menu.xml
index 897db65..4538743 100755
--- a/data/menu.xml
+++ b/data/menu.xml
@@ -69,6 +69,7 @@
 				<item level="0" text="Network" entryID="network_setup"><screen module="NetworkSetup" screen="NetworkAdapterSelection"/></item>
 				<item level="1" text="Input devices" entryID="input_device_setup"><screen module="InputDeviceSetup" screen="InputDeviceSelection"/></item>
 				<item entryID="lcd_setup" requires="Display"><setup level="1" id="lcd"/></item>
+				<item entryID="led_setup" level="1" text="LED Setup" weight="15"><setup id="ledsetup" /></item>
 				<item entryID="keyboard_setup" text="Keyboard"><setup id="keyboard"/></item>
 				<item level="2" text="Recording paths" entryID="RecordPaths"><screen module="RecordPaths" screen="RecordPathsSettings"/></item>
 				<item level="1" text="Hotkey" entryID="hotkey_setup"><screen module="Hotkey" screen="HotkeySetup"/></item>
diff --git a/data/setup.xml b/data/setup.xml
index 19586d0..27a7ece 100755
--- a/data/setup.xml
+++ b/data/setup.xml
@@ -220,12 +220,6 @@
 		<item level="0" text="Brightness" description="Configure the brightness level of the front panel display.">config.lcd.bright</item>
 		<item level="0" text="Contrast" description="Configure the contrast level of the front panel display.">config.lcd.contrast</item>
 		<item level="0" text="Standby" description="Configure the brightness level of the front panel display during standby.">config.lcd.standby</item>
-		<item level="0" text="Power LED" description="Turn on the power LED." requires="PowerLED">config.usage.powerLED</item>
-		<item level="0" text="Standby LED" description="Turn on the power LED during standby." requires="StandbyLED">config.usage.standbyLED</item>
-		<item level="0" text="Deep Standby LED" description="Turn on the power LED during deep standby." requires="SuspendLED">config.usage.suspendLED</item>
-		<item level="0" requires="LedPowerColor" text="Operating LED status while running." description="With this option you can switch the LED color or deactivate the LED.">config.lcd.ledpowercolor</item>
-		<item level="0" requires="LedStandbyColor" text="Operating LED status in standby mode" description="With this option you can switch the LED color or deactivate the LED.">config.lcd.ledstandbycolor</item>
-		<item level="0" requires="LedSuspendColor" text="Operating LED status in deep standby mode" description="With this option you can switch the LED color or deactivate the LED.">config.lcd.ledsuspendcolor</item>
 		<item level="0" requires="Power4x7On" text="Switch on the display during operation." description="With this option you can switch on the display during operation.">config.lcd.power4x7on</item>
 		<item level="0" requires="Power4x7Standby" text="Switch on the display during Standby Mode" description="With this option you can switch on the display in Standby Mode.">config.lcd.power4x7standby</item>
 		<item level="0" requires="Power4x7Suspend" text="Switch on the display during Suspend Mode" description="With this option you can switch on the display in Deep Standby Mode.">config.lcd.power4x7suspend</item>
@@ -237,6 +231,28 @@
 		<item level="2" text="Show symbols on display" description="This option allows you to show all symbols on the display." requires="LCDshow_symbols">config.usage.lcd_show_symbols</item>
 		<item level="2" text="Use 12 characters display mode" description="If enabled, display shows 12 chars instead 8, but in latin-1/translit only." requires="hasXcoreVFD">config.usage.toggle12to8characterVFD</item>
 	</setup>
+	<setup key="ledsetup" title="LED Setup">
+		<item level="0" text="LED color during normal operations" description="Configure front LED color during normal operations (this needs an enigma2 restart).">config.usage.frontled_color</item>
+		<item level="0" text="LED color during recording" description="Configure front LED color during recording (this needs an enigma2 restart).">config.usage.frontledrec_color</item>
+		<item level="0" text="LED color during standby" description="Configure front LED color during standby (this needs an enigma2 restart).">config.usage.frontledstdby_color</item>
+		<item level="0" text="LED color during recording in standby" description="Configure front LED color during recording in standby (this needs an enigma2 restart).">config.usage.frontledrecstdby_color</item>
+		<item level="0" text="Standby LED" description="Turn on the power LED during standby." requires="StandbyLED">config.usage.standbyLED</item>
+		<item level="0" text="Deep Standby LED" description="Turn on the power LED during deep standby." requires="SuspendLED">config.usage.suspendLED</item>
+		<item level="0" text="LED Normal" description="LED brightness during normal operations.">config.lcd.ledbrightness</item>
+		<item level="0" text="LED Standby" description="LED brightness during standby.">config.lcd.ledbrightnessstandby</item>
+		<item level="0" text="LED Deep Standby" description="LED brightness during deep standby.">config.lcd.ledbrightnessdeepstandby</item>
+		<item level="0" requires="PowerLed" text="Turn on the power LED." description="Power LED can be turned on or off here.">config.usage.lcd_powerled</item>
+		<item level="0" requires="PowerLed2" text="Turn on the control LED." description="Control LED can be turned on or off here.">config.usage.lcd_powerled2</item>
+		<item level="0" requires="StandbyLED" text="Power LED state in Standby" description="Power LED state during standby.">config.usage.lcd_standbypowerled</item>
+		<item level="0" requires="SuspendLED" text="Power LED state in Deep-Standby" description="Power LED state during deep-standby.">config.usage.lcd_deepstandbypowerled</item>
+		<item level="0" requires="LedPowerColor" text="Operating LED status while running." description="With this option you can switch the LED color or deactivate the LED.">config.lcd.ledpowercolor</item>
+		<item level="0" requires="LedStandbyColor" text="Operating LED status in standby mode" description="With this option you can switch the LED color or deactivate the LED.">config.lcd.ledstandbycolor</item>
+		<item level="0" requires="LedSuspendColor" text="Operating LED status in deep standby mode" description="With this option you can switch the LED color or deactivate the LED.">config.lcd.ledsuspendcolor</item>
+		<item level="0" requires="Power4x7On" text="Switch on the display during operation." description="With this option you can switch on the display during operation.">config.lcd.power4x7on</item>
+		<item level="0" requires="Power4x7Standby" text="Switch on the display during Standby Mode" description="With this option you can switch on the display in Standby Mode.">config.lcd.power4x7standby</item>
+		<item level="0" requires="Power4x7Suspend" text="Switch on the display during Suspend Mode" description="With this option you can switch on the display in Deep Standby Mode.">config.lcd.power4x7suspend</item>
+		<item level="0" requires="7segment" text="Show in Standby" description="This option allows you choose how to display the time or nothing in Standby">config.usage.show_in_standby</item>
+	</setup>
 	<setup key="satconfig" title="Satellite dish setup">
 		<item text="Tuner slot" description="Choose which tuner to configure.">config.sat.tunerslot</item>
 		<item text="Configuration mode" description="Configure the tuner mode.">config.sat.configmode</item>
diff --git a/lib/python/Components/Lcd.py b/lib/python/Components/Lcd.py
index 02232a9..be37a14 100755
--- a/lib/python/Components/Lcd.py
+++ b/lib/python/Components/Lcd.py
@@ -47,12 +47,17 @@ class LCD:
 
 def leaveStandby():
 	config.lcd.bright.apply()
+	if model == "vuultimo":
+		config.lcd.ledbrightness.apply()
+		config.lcd.ledbrightnessdeepstandby.apply()
 
 
 def standbyCounterChanged(dummy):
 	from Screens.Standby import inStandby
 	inStandby.onClose.append(leaveStandby)
 	config.lcd.standby.apply()
+	config.lcd.ledbrightnessstandby.apply()
+	config.lcd.ledbrightnessdeepstandby.apply()
 
 
 def InitLcd():
@@ -142,6 +147,31 @@ def InitLcd():
 
 			if "live_enable" in SystemInfo["LcdLiveTV"]:
 				config.misc.standbyCounter.addNotifier(standbyCounterChangedLCDLiveTV, initial_call=False)
+
+		if model == "vuultimo":
+			config.lcd.ledblinkingtime = ConfigSlider(default = 5, increment = 1, limits = (0, 15))
+			config.lcd.ledblinkingtime.addNotifier(setLEDblinkingtime);
+			config.lcd.ledbrightnessdeepstandby = ConfigSlider(default = 1, increment = 1, limits = (0, 15))
+			config.lcd.ledbrightnessdeepstandby.addNotifier(setLEDnormalstate);
+			config.lcd.ledbrightnessdeepstandby.addNotifier(setLEDdeepstandby);
+			config.lcd.ledbrightnessdeepstandby.apply = lambda : setLEDdeepstandby(config.lcd.ledbrightnessdeepstandby)
+			config.lcd.ledbrightnessstandby = ConfigSlider(default = 1, increment = 1, limits = (0, 15))
+			config.lcd.ledbrightnessstandby.addNotifier(setLEDnormalstate);
+			config.lcd.ledbrightnessstandby.apply = lambda : setLEDnormalstate(config.lcd.ledbrightnessstandby)
+			config.lcd.ledbrightness = ConfigSlider(default = 3, increment = 1, limits = (0, 15))
+			config.lcd.ledbrightness.addNotifier(setLEDnormalstate);
+			config.lcd.ledbrightness.apply = lambda : setLEDnormalstate(config.lcd.ledbrightness)
+			config.lcd.ledbrightness.callNotifiersOnSaveAndCancel = True
+		else:
+			def doNothing():
+				pass
+			config.lcd.ledbrightness = ConfigNothing()
+			config.lcd.ledbrightness.apply = lambda : doNothing()
+			config.lcd.ledbrightnessstandby = ConfigNothing()
+			config.lcd.ledbrightnessstandby.apply = lambda : doNothing()
+			config.lcd.ledbrightnessdeepstandby = ConfigNothing()
+			config.lcd.ledbrightnessdeepstandby.apply = lambda : doNothing()
+			config.lcd.ledblinkingtime = ConfigNothing()
 	else:
 		def doNothing():
 			pass
@@ -150,6 +180,12 @@ def InitLcd():
 		config.lcd.standby = ConfigNothing()
 		config.lcd.bright.apply = lambda: doNothing()
 		config.lcd.standby.apply = lambda: doNothing()
+		config.lcd.ledbrightness = ConfigNothing()
+		config.lcd.ledbrightness.apply = lambda : doNothing()
+		config.lcd.ledbrightnessstandby = ConfigNothing()
+		config.lcd.ledbrightnessstandby.apply = lambda : doNothing()
+		config.lcd.ledbrightnessdeepstandby = ConfigNothing()
+		config.lcd.ledbrightnessdeepstandby.apply = lambda : doNothing()
 
 	config.misc.standbyCounter.addNotifier(standbyCounterChanged, initial_call=False)
 
diff --git a/lib/python/Components/UsageConfig.py b/lib/python/Components/UsageConfig.py
index 7dc4075..188cb73 100755
--- a/lib/python/Components/UsageConfig.py
+++ b/lib/python/Components/UsageConfig.py
@@ -321,6 +321,11 @@ def InitUsageConfig():
 
 	config.usage.swap_snr_on_osd = ConfigYesNo(default=False)
 
+	config.usage.frontled_color = ConfigSelection(default = "2", choices = [("0", _("Off")), ("1", _("Blue")), ("2", _("Red")), ("3", _("Blinking blue")), ("4", _("Blinking red"))])
+	config.usage.frontledrec_color = ConfigSelection(default = "3", choices = [("0", _("Off")), ("1", _("Blue")), ("2", _("Red")), ("3", _("Blinking blue")), ("4", _("Blinking red"))])
+	config.usage.frontledstdby_color = ConfigSelection(default = "0", choices = [("0", _("Off")), ("1", _("Blue")), ("2", _("Red")), ("3", _("Blinking blue")), ("4", _("Blinking red"))])
+	config.usage.frontledrecstdby_color = ConfigSelection(default = "3", choices = [("0", _("Off")), ("1", _("Blue")), ("2", _("Red")), ("3", _("Blinking blue")), ("4", _("Blinking red"))])
+
 	def SpinnerOnOffChanged(configElement):
 		setSpinnerOnOff(int(configElement.value))
 	config.usage.show_spinner.addNotifier(SpinnerOnOffChanged)
diff --git a/lib/python/Screens/SessionGlobals.py b/lib/python/Screens/SessionGlobals.py
index 009ec34..2f4efd5 100755
--- a/lib/python/Screens/SessionGlobals.py
+++ b/lib/python/Screens/SessionGlobals.py
@@ -10,6 +10,8 @@ from Components.Sources.RecordState import RecordState
 from Components.Sources.HddState import HddState
 from Components.Converter.Combine import Combine
 from Components.Renderer.FrontpanelLed import FrontpanelLed
+from Components.config import config
+from enigma import getBoxType
 
 
 class SessionGlobals(Screen):
@@ -44,10 +46,61 @@ class SessionGlobals(Screen):
 		PATTERN_OFF = (20, 0, 0)
 		PATTERN_BLINK = (20, 0x55555555, 0xa7fccf7a)
 
+		NormalLed0 = PATTERN_OFF
+		NormalLed1 = PATTERN_OFF
+		if config.usage.frontled_color.value == "1":
+			NormalLed0 = PATTERN_ON
+		if config.usage.frontled_color.value == "2":
+			NormalLed1 = PATTERN_ON
+		if config.usage.frontled_color.value == "3":
+			NormalLed0 = PATTERN_BLINK
+		if config.usage.frontled_color.value == "4":
+			NormalLed1 = PATTERN_BLINK
+
+		RecLed0 = PATTERN_OFF
+		RecLed1 = PATTERN_OFF
+		if config.usage.frontledrec_color.value == "1":
+			RecLed0 = PATTERN_ON
+		if config.usage.frontledrec_color.value == "2":
+			RecLed1 = PATTERN_ON
+		if config.usage.frontledrec_color.value == "3":
+			RecLed0 = PATTERN_BLINK
+		if config.usage.frontledrec_color.value == "4":
+			RecLed1 = PATTERN_BLINK
+
+		StandbyLed0 = PATTERN_OFF
+		StandbyLed1 = PATTERN_OFF
+		if config.usage.frontledstdby_color.value == "1":
+			StandbyLed0 = PATTERN_ON
+		if config.usage.frontledstdby_color.value == "2":
+			StandbyLed1 = PATTERN_ON
+		if config.usage.frontledstdby_color.value == "3":
+			StandbyLed0 = PATTERN_BLINK
+		if config.usage.frontledstdby_color.value == "4":
+			StandbyLed1 = PATTERN_BLINK
+
+		RecstdbyLed0 = PATTERN_OFF
+		RecstdbyLed1 = PATTERN_OFF
+		if config.usage.frontledrecstdby_color.value == "1":
+			RecstdbyLed0 = PATTERN_ON
+		if config.usage.frontledrecstdby_color.value == "2":
+			RecstdbyLed1 = PATTERN_ON
+		if config.usage.frontledrecstdby_color.value == "3":
+			RecstdbyLed0 = PATTERN_BLINK
+		if config.usage.frontledrecstdby_color.value == "4":
+			RecstdbyLed1 = PATTERN_BLINK
+
 		nr_leds = SystemInfo.get("NumFrontpanelLEDs", 0)
 
 		if nr_leds == 1:
 			FrontpanelLed(which=0, boolean=False, patterns=[PATTERN_OFF, PATTERN_BLINK, PATTERN_OFF, PATTERN_BLINK]).connect(combine)
 		elif nr_leds == 2:
-			FrontpanelLed(which=0, boolean=False, patterns=[PATTERN_OFF, PATTERN_BLINK, PATTERN_ON, PATTERN_BLINK]).connect(combine)
-			FrontpanelLed(which=1, boolean=False, patterns=[PATTERN_ON, PATTERN_ON, PATTERN_OFF, PATTERN_OFF]).connect(combine)
+			if getBoxType() in "dm520":
+				FrontpanelLed(which = 0, boolean = False, patterns = [PATTERN_ON, PATTERN_BLINK, PATTERN_OFF, PATTERN_BLINK]).connect(combine)
+				FrontpanelLed(which = 1, boolean = False, patterns = [PATTERN_OFF, PATTERN_OFF, PATTERN_OFF, PATTERN_OFF]).connect(combine)
+			elif getBoxType() in ("dm900","dm920"):
+				FrontpanelLed(which = 0, boolean = False, patterns = [NormalLed0, RecLed0, StandbyLed0, RecstdbyLed0]).connect(combine)
+				FrontpanelLed(which = 1, boolean = False, patterns = [NormalLed1, RecLed1, StandbyLed1, RecstdbyLed1]).connect(combine)
+			else:
+				FrontpanelLed(which = 0, boolean = False, patterns = [PATTERN_OFF, PATTERN_BLINK, PATTERN_ON, PATTERN_BLINK]).connect(combine)
+				FrontpanelLed(which = 1, boolean = False, patterns = [PATTERN_ON, PATTERN_ON, PATTERN_OFF, PATTERN_OFF]).connect(combine)
-- 
2.25.1

