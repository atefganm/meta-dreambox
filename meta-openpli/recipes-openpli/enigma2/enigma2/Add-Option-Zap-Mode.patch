From b20a136cff4aeb9b299e508f90f0270044b218d7 Mon Sep 17 00:00:00 2001
From: fairbird, RAED <rrrr53@hotmail.com>
Date: Fri, 5 Mar 2021 14:55:06 +0300
Subject: Add Option Zap channels Mode

---
 data/setup.xml                       |  1 +
 lib/python/Components/UsageConfig.py | 25 +++++++++++++++++++++++++
 2 files changed, 26 insertions(+)

diff --git a/data/setup.xml b/data/setup.xml
index 638ca67..de0f72c 100644
--- a/data/setup.xml
+++ b/data/setup.xml
@@ -249,6 +249,7 @@
 		<item level="0" text="Show menu or plugin numbers" description="This option allows you to show menu and/or plugin number quick links.">config.usage.menu_show_numbers</item>
 		<item level="2" text="Show softcam setup in extensions menu" description="This option allows you to add the softcam setup in the extensions menu." requires="HasSoftcamInstalled">config.misc.softcam_setup.extension_menu</item>
 		<item level="1" text="Zap mode" requires="ZapMode" description="Configure the way in which the receiver changes channels.">config.misc.zapmode</item>
+		<item level="1" text="Zap mode" description="Configure the way in which your %s %s changes channels.">config.misc.zapmodeDM</item>
 		<item level="2" text="Enable teletext caching" description="When enabled, teletext pages will be cached, allowing faster access.">config.usage.enable_tt_caching</item>
 		<item level="1" text="12V output" description="12V output" requires="12V_Output.">config.usage.output_12V</item>
 		<item level="1" text="Alternative services tuner priority" description="Configure which tuner type will be preferred when the same service is available on different types of tuners. Choose 'no priority' to try each alternative one by one regardless of the tuner type.">config.usage.alternatives_priority</item>
diff --git a/lib/python/Components/UsageConfig.py b/lib/python/Components/UsageConfig.py
index 0dff999..973c5f3 100644
--- a/lib/python/Components/UsageConfig.py
+++ b/lib/python/Components/UsageConfig.py
@@ -1329,6 +1329,12 @@ def InitUsageConfig():
 			("mute", _("Black screen")), ("hold", _("Hold screen")), ("mutetilllock", _("Black screen till locked")), ("holdtilllock", _("Hold till locked"))])
 		config.misc.zapmode.addNotifier(setZapmode, immediate_feedback = False)
 
+	if not SystemInfo["ZapMode"] and os.path.exists("/proc/stb/info/model"):
+		def setZapmodeDM(el):
+			print('[UsageConfig] >>> zapmodeDM')
+		config.misc.zapmodeDM = ConfigSelection(default="black", choices=[("black", _("Black screen")), ("hold", _("Hold screen"))])
+		config.misc.zapmodeDM.addNotifier(setZapmodeDM, immediate_feedback = False)
+
 	if SystemInfo["VFD_scroll_repeats"]:
 		def scroll_repeats(el):
 			open(SystemInfo["VFD_scroll_repeats"], "w").write(el.value)
diff --git a/lib/dvb/decoder.cpp b/lib/dvb/decoder.cpp
--- a/lib/dvb/decoder.cpp
+++ b/lib/dvb/decoder.cpp
@@ -1,6 +1,7 @@
 #include <lib/base/cfile.h>
 #include <lib/base/ebase.h>
 #include <lib/base/eerror.h>
+#include <lib/base/nconfig.h> // access to python config
 #include <lib/base/wrappers.h>
 #include <lib/dvb/decoder.h>
 #include <lib/components/tuxtxtapp.h>
@@ -329,12 +330,14 @@ eDVBVideo::eDVBVideo(eDVBDemux *demux, int dev)
 		m_fd_demux = -1;
 	}
 
-#ifndef DREAMBOX
+std::string zapmodeDM = eConfigManager::getConfigValue("config.misc.zapmodeDM");
+if (zapmodeDM == "hold")
+{
 	if (m_fd >= 0)
 	{
 		::ioctl(m_fd, VIDEO_SELECT_SOURCE, demux ? VIDEO_SOURCE_DEMUX : VIDEO_SOURCE_HDMI);
 	}
-#endif
+}
 	if (m_close_invalidates_attributes < 0)
 	{
 		/*
